@article{shatdalAdaptive1995,
	title = {Adaptive parallel aggregation algorithms},
	volume = {24},
	issn = {0163-5808},
	url = {https://dl.acm.org/doi/10.1145/568271.223801},
	doi = {10.1145/568271.223801},
	abstract = {Aggregation and duplicate removal are common in SQL queries. However, in the parallel query processing literature, aggregate processing has received surprisingly little attention; furthermore, for each of the traditional parallel aggregation algorithms, there is a range of grouping selectivities where the algorithm performs poorly. In this work, we propose new algorithms that dynamically adapt, at query evaluation time, in response to observed grouping selectivities. Performance analysis via analytical modeling and an implementation on a workstation-cluster shows that the proposed algorithms are able to perform well for all grouping selectivities. Finally, we study the effect of data skew and show that for certain data sets the proposed algorithms can even outperform the best of traditional approaches.},
	number = {2},
	urldate = {2025-03-24},
	journal = {SIGMOD Rec.},
	author = {Shatdal, Ambuj and Naughton, Jeffrey F.},
	month = may,
	year = {1995},
	pages = {104--114},
	annote = {two phase aggregation
},
	file = {Full Text PDF:/Users/chaosarium/Zotero/storage/XPI2L8Y7/Shatdal and Naughton - 1995 - Adaptive parallel aggregation algorithms.pdf:application/pdf},
}

@article{bellamkondaAdaptive2013,
	title = {Adaptive and big data scale parallel execution in oracle},
	volume = {6},
	issn = {2150-8097},
	url = {https://dl.acm.org/doi/10.14778/2536222.2536235},
	doi = {10.14778/2536222.2536235},
	abstract = {This paper showcases some of the newly introduced parallel execution methods in Oracle RDBMS. These methods provide highly scalable and adaptive evaluation for the most commonly used SQL operations - joins, group-by, rollup/cube, grouping sets, and window functions. The novelty of these techniques is their use of multi-stage parallelization models, accommodation of optimizer mistakes, and the runtime parallelization and data distribution decisions. These parallel plans adapt based on the statistics gathered on the real data at query execution time. We realized enormous performance gains from these adaptive parallelization techniques. The paper also discusses our approach to parallelize queries with operations that are inherently serial. We believe all these techniques will make their way into big data analytics and other massively parallel database systems.},
	number = {11},
	urldate = {2025-03-24},
	journal = {Proc. VLDB Endow.},
	author = {Bellamkonda, Srikanth and Li, Hua-Gang and Jagtap, Unmesh and Zhu, Yali and Liang, Vince and Cruanes, Thierry},
	month = aug,
	year = {2013},
	pages = {1102--1113},
	file = {Full Text PDF:/Users/chaosarium/Zotero/storage/7TNLS6M9/Bellamkonda et al. - 2013 - Adaptive and big data scale parallel execution in oracle.pdf:application/pdf},
}

@article{hassanScalability2015,
	series = {International {Conference} {On} {Computational} {Science}, {ICCS} 2015},
	title = {Towards {Scalability} and {Data} {Skew} {Handling} in {GroupBy}-{Joins} using {MapReduce} {Model}},
	volume = {51},
	issn = {1877-0509},
	url = {https://www.sciencedirect.com/science/article/pii/S187705091501008X},
	doi = {10.1016/j.procs.2015.05.200},
	abstract = {For over a decade, MapReduce has become the leading programming model for parallel and massive processing of large volumes of data. This has been driven by the development of many frameworks such as Spark, Pig and Hive, facilitating data analysis on large-scale systems. However, these frameworks still remain vulnerable to communication costs, data skew and tasks imbalance problems. This can have a devastating effect on the performance and on the scalability of these systems, more particularly when treating GroupBy-Join queries of large datasets. In this paper, we present a new GroupBy-Join algorithm allowing to reduce communication costs considerably while avoiding data skew effects. A cost analysis of this algorithm shows that our approach is insensitive to data skew and ensures perfect balancing properties during all stages of GroupBy-Join computation even for highly skewed data. These performances have been confirmed by a series of experimentations.},
	urldate = {2025-03-24},
	journal = {Procedia Computer Science},
	author = {Hassan, M. Al Hajj and Bamha, M.},
	month = jan,
	year = {2015},
	keywords = {Apache Pig Latin, Data skew, Distributed file systems, Hadoop framework, Join and GrouBy-join operations, MapReduce programming model},
	pages = {70--79},
	file = {ScienceDirect Full Text PDF:/Users/chaosarium/Zotero/storage/B2IWVCCD/Hassan and Bamha - 2015 - Towards Scalability and Data Skew Handling in GroupBy-Joins using MapReduce Model.pdf:application/pdf},
}

@misc{grayData2007,
	title = {Data {Cube}: {A} {Relational} {Aggregation} {Operator} {Generalizing} {Group}-{By}, {Cross}-{Tab}, and {Sub}-{Totals}},
	shorttitle = {Data {Cube}},
	url = {http://arxiv.org/abs/cs/0701155},
	doi = {10.48550/arXiv.cs/0701155},
	abstract = {Data analysis applications typically aggregate data across many dimensions looking for anomalies or unusual patterns. The SQL aggregate functions and the GROUP BY operator produce zero-dimensional or one-dimensional aggregates. Applications need the N-dimensional generalization of these operators. This paper defines that operator, called the data cube or simply cube. The cube operator generalizes the histogram, cross-tabulation, roll-up, drill-down, and sub-total constructs found in most report writers. The novelty is that cubes are relations. Consequently, the cube operator can be imbedded in more complex non-procedural data analysis programs. The cube operator treats each of the N aggregation attributes as a dimension of N-space. The aggregate of a particular set of attribute values is a point in this space. The set of points forms an N-dimensional cube. Super-aggregates are computed by aggregating the N-cube to lower dimensional spaces. This paper (1) explains the cube and roll-up operators, (2) shows how they fit in SQL, (3) explains how users can define new aggregate functions for cubes, and (4) discusses efficient techniques to compute the cube. Many of these features are being added to the SQL Standard.},
	urldate = {2025-03-24},
	publisher = {arXiv},
	author = {Gray, Jim and Chaudhuri, Surajit and Bosworth, Adam and Layman, Andrew and Reichart, Don and Venkatrao, Murali and Pellow, Frank and Pirahesh, Hamid},
	month = jan,
	year = {2007},
	note = {arXiv:cs/0701155},
	keywords = {Computer Science - Databases},
	file = {Preprint PDF:/Users/chaosarium/Zotero/storage/W5TR9S3B/Gray et al. - 2007 - Data Cube A Relational Aggregation Operator Generalizing Group-By, Cross-Tab, and Sub-Totals.pdf:application/pdf;Snapshot:/Users/chaosarium/Zotero/storage/J6JUY8PH/0701155.html:text/html},
}

@inproceedings{cieslewiczAdaptive2007,
	title = {Adaptive {Aggregation} on {Chip} {Multiprocessors}},
	url = {https://www.semanticscholar.org/paper/Adaptive-Aggregation-on-Chip-Multiprocessors-Cieslewicz-Ross/93df052cf26fa878a2381b5ecf8f5649a01267f3},
	abstract = {The recent introduction of commodity chip multiprocessors requires that the design of core database operations be carefully examined to take full advantage of on-chip parallelism. In this paper we examine aggregation in a multi-core environment, the Sun UltraSPARC T1, a chip multiprocessor with eight cores and a shared L2 cache. Aggregation is an important aspect of query processing that is seemingly easy to understand and implement. Our research, however, demonstrates that a chip multiprocessor adds new dimensions to understanding hash-based aggregation performance---concurrent sharing of aggregation data structures and contentious accesses to frequently used values. We also identify a trade off between private data structures assigned to each thread versus shared data structures for aggregation. Depending on input characteristics, different aggregation strategies are optimal and choosing the wrong strategy can result in a performance penalty of over an order of magnitude. We provide a thorough explanation of the factors affecting aggregation performance on chip multiprocessors and identify three key input characteristics that dictate performance: (1) average run length of identical group-by values, (2) locality of references to the aggregation hash table, and (3) frequency of repeated accesses to the same hash table location. We then introduce an adaptive aggregation operator that performs lightweight sampling of the input to choose the correct aggregation strategy with high accuracy. Our experiments verify that our adaptive algorithm chooses the highest performing aggregation strategy on a number of common input distributions.},
	urldate = {2025-03-24},
	author = {Cieslewicz, J. and Ross, K. A.},
	month = sep,
	year = {2007},
	annote = {[TLDR] This paper examines aggregation in a multi-core environment, the Sun UltraSPARC T1, a chip multiprocessor with eight cores and a shared L2 cache, and introduces an adaptive aggregation operator that performs lightweight sampling of the input to choose the correct aggregation strategy with high accuracy.},
	file = {Full Text PDF:/Users/chaosarium/Zotero/storage/MGL2IHNM/Cieslewicz and Ross - 2007 - Adaptive Aggregation on Chip Multiprocessors.pdf:application/pdf},
}

@misc{raasveldt_parallel_2022,
	title = {Parallel {Grouped} {Aggregation} in {DuckDB}},
	url = {https://duckdb.org/2022/03/07/aggregate-hashtable.html},
	abstract = {DuckDB has a fully parallelized aggregate hash table that can efficiently aggregate over millions of groups.},
	language = {en},
	urldate = {2025-03-26},
	journal = {DuckDB},
	author = {Raasveldt, Hannes MÃ¼hleisen {and} Mark},
	month = mar,
	year = {2022},
	file = {Snapshot:/Users/chaosarium/Zotero/storage/W6RI9A4N/aggregate-hashtable.html:text/html},
}
